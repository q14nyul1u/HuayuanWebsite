---
import { getCollection } from "astro:content";
import { siteLang, siteCurrency } from "~/data/config";
import Badge from "./Badge.astro";
const allLessions = await getCollection("lessons_de");
const siteLangFormat = siteLang.replace("_", "-");
---

<div class="flex gap-8 lg:gap-12">
	<!-- Vertical Quick Nav -->
	<div id="lesson-nav-wrapper" class="hidden lg:block lg:w-64 xl:w-72 flex-shrink-0">
		<nav class="sticky top-32 bg-brand-blue text-white rounded-lg p-4">
			<h4 class="text-base font-semibold mb-4 text-center">Lektionen</h4>
			<ul id="lesson-nav" class="space-y-2">
				{
					allLessions.map((lesson) => (
						<li>
							<a
								href={`#${lesson.data.slug}`}
								class="block text-center rounded-lg px-3 py-2 transition font-medium select-none text-sm hover:bg-white/10"
								data-category-link={lesson.data.slug}
							>
								{lesson.data.prettyName}
							</a>
						</li>
					))
				}
			</ul>
		</nav>
	</div>

	<!-- Mobile Horizontal Nav (shown only on mobile) -->
	<div id="lesson-nav-wrapper-mobile" class="hidden">
	</div>

	<!-- Main Content -->
	<div class="flex-1 min-w-0">
		<div class="grid grid-cols-1 gap-y-15">
			{
				allLessions.map((lesson) => (
					<div id={lesson.data.slug} class="space-y-16 scroll-mt-32 lg:scroll-mt-40"
						 data-category-section={lesson.data.slug}>
						<div class="flex flex-col items-center lg:mb-5 gap-2 max-w-lg mx-auto text-balance text-center">
							<h3 class="h4 text-brand-light-blue/70">{lesson.data.prettyName}</h3>
							<Badge color="blue" title={lesson.data.description}/>
						</div>

						<dl class="max-w-5xl mx-auto">
							<div class="flex flex-col items-center gap-2 max-w-lg mx-auto text-balance text-center">
								{lesson.data.plates.map((item) => (
									<div>
										<dt>
											<div>
												<span class="font-bold text-2xl tracking-wide">{item.name}</span>
											</div>
										</dt>
										<dd>
											<p class="mt-2 text-gray-500 tracking-wide leading-normal text-balance">
												{item.description}
											</p>
										</dd>
									</div>
								))}
							</div>
						</dl>
					</div>
				))
			}
		</div>
	</div>
</div>

<style>
	@media screen and (min-width: 0px) and (max-width: 640px) {
		#lesson-nav-wrapper-mobile {
			right: 0;
			left: 0;
			top: 0;
			margin-left: -50vw;
			margin-right: -50vw;
			max-width: 100vw;
			width: 100vw;
		}
	}
</style>

<script>
	import Swiper from "swiper";
	import "swiper/css";

	document.addEventListener("astro:page-load", () => {
		// Initialize mobile swiper
		const swiperlessons = document.querySelector(".swiper-lessons") as HTMLElement;
		let swiper: Swiper | null = null;

		if (swiperlessons) {
			swiper = new Swiper(swiperlessons, {
				loop: false,
				spaceBetween: 32,
				slidesPerView: "auto",
			});
		}

		// Setup category highlighting for both desktop and mobile
		const categoryLinks = document.querySelectorAll("[data-category-link]");
		const categorySections = document.querySelectorAll("[data-category-section]");
		let activeLink: Element | null = null;
		let isNavigatingByClick = false;

		// Add hover effect to all links initially
		categoryLinks.forEach((link) => {
			link.classList.add("hover:bg-white/10");
		});

		// Function to set active category
		function setActiveCategory(id: string) {
			// Remove active classes and restore hover effect to all links
			categoryLinks.forEach((link) => {
				link.classList.remove("bg-white", "text-brand-blue");
				link.classList.add("hover:bg-white/10");
			});

			// Add active classes to current link and remove hover effect
			const currentLinks = document.querySelectorAll(`[data-category-link="${id}"]`);
			currentLinks.forEach((currentLink) => {
				currentLink.classList.add("bg-white", "text-brand-blue");
				currentLink.classList.remove("hover:bg-white/10");
				activeLink = currentLink;
			});

			// Slide to make the active link visible if needed (mobile only)
			if (swiper) {
				const mobileLinks = document.querySelectorAll("#lesson-nav-mobile [data-category-link]");
				const linkIndex = Array.from(mobileLinks).findIndex(link =>
					(link as HTMLElement).dataset.categoryLink === id
				);
				if (linkIndex !== -1) {
					swiper.slideTo(linkIndex);
				}
			}
		}

		// Set active category on click
		categoryLinks.forEach((link) => {
			link.addEventListener("click", (e) => {
				const targetId = (link as HTMLElement).dataset.categoryLink;
				if (targetId) {
					isNavigatingByClick = true;
					setActiveCategory(targetId);

					setTimeout(() => {
						isNavigatingByClick = false;
					}, 1000);
				}
			});
		});

		// Set active category on scroll
		const observer = new IntersectionObserver(
			(entries) => {
				if (isNavigatingByClick) return;

				entries.forEach((entry) => {
					if (entry.isIntersecting) {
						const sectionId = (entry.target as HTMLElement).dataset.categorySection;
						if (sectionId) {
							setActiveCategory(sectionId);
						}
					}
				});
			},
			{ rootMargin: "-20% 0px -60% 0px", threshold: 0 }
		);

		// Observe all category sections
		categorySections.forEach((section) => {
			observer.observe(section);
		});

		// Set initial active category
		const setInitialActiveCategory = () => {
			if (window.location.hash) {
				const id = window.location.hash.substring(1);
				setActiveCategory(id);
			} else if (categorySections.length > 0) {
				const firstSectionId = (categorySections[0] as HTMLElement).dataset.categorySection;
				if (firstSectionId) {
					setActiveCategory(firstSectionId);
				}
			}
		};

		setInitialActiveCategory();
	});
</script>